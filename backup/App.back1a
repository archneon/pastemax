// src/App.tsx
import React, {
  useState,
  useEffect,
  useRef, // Ensure useRef is imported
  useCallback,
  useMemo,
  MouseEvent, // Import MouseEvent directly
} from "react";
import Sidebar from "./components/Sidebar";
import FileList from "./components/FileList";
import CopyButton from "./components/CopyButton";
import FileTreeToggle from "./components/FileTreeToggle";
import { FileData, SidebarProps } from "./types/FileTypes"; // Import SidebarProps
import { ThemeProvider } from "./context/ThemeContext";
import ThemeToggle from "./components/ThemeToggle";
import FileListToggle from "./components/FileListToggle";
import logger from "./utils/logger";
import {
  generateAsciiFileTree,
  normalizePath,
  arePathsEqual,
  comparePathsStructurally,
  basename,
  getRelativePath,
} from "./utils/pathUtils";
import {
  X,
  FolderOpen,
  RefreshCw,
  LogOut,
  ChartNoAxesColumnIncreasingIcon,
  ChartNoAxesColumnDecreasingIcon,
  SortAsc,
  SortDesc,
  ArrowUpDown,
  FolderUp,
  FolderDown,
} from "lucide-react";
import {
  PROMPT_SECTIONS,
  PROMPT_MARKERS,
  PROJECT_TREE_CONFIG,
  DESCRIPTIONS_DIR,
  OVERVIEW_FILENAME,
  DEFAULT_SORT_ORDER,
  DEFAULT_INCLUDE_FILE_TREE_GLOBAL,
  DEFAULT_INCLUDE_PROMPT_OVERVIEW_GLOBAL,
  // SORT_ORDERS, // Not needed directly if using the typed array below
} from "./constants";
import { PromptSectionDefinition } from "./types/promptConfigTypes";
import {
  useProjectStore,
  selectCurrentSelectedFolder,
  selectRecentFolders,
  selectAllFiles as selectStoreAllFilesHook, // Renamed to avoid conflict in this scope if needed elsewhere
  selectProcessingStatus,
  selectCurrentProjectState,
  selectHasHydrated,
} from "./store/projectStore"; // Import store and selectors
import { ProcessingStatus } from "./types/projectStateTypes";

// Add render counter for debugging
let renderCount = 0;
// Track session ID to distinguish between multiple module loads (hot reloading)
const APP_INSTANCE_ID = Math.random().toString(36).substring(2, 8);

logger.info(
  `App.tsx component function starting (instance: ${APP_INSTANCE_ID})`
);

// Access the electron API from the window object
declare global {
  interface Window {
    electron: {
      ipcRenderer: {
        send: (channel: string, data?: any) => void;
        on: (channel: string, func: (...args: any[]) => void) => void;
        removeListener: (
          channel: string,
          func: (...args: any[]) => void
        ) => void;
      };
    };
  }
}

// Interface for sort options array elements
interface SortOptionConfig {
  value: string;
  label: string; // Keep label for potential future use or tooltips
  icon: JSX.Element; // Type for React elements
  description: string;
}

// Define categorizeFile function outside the component
const categorizeFile = (
  file: FileData,
  currentSelectedFolder: string | null,
  sections: PromptSectionDefinition[]
): string => {
  const defaultSection = sections.find((s) => s.directory === null);
  const defaultSectionId = defaultSection?.id || "project_files";

  if (
    file.descriptionForSectionId ||
    file.isOverviewTemplate ||
    file.isProjectTreeDescription ||
    !currentSelectedFolder
  ) {
    return defaultSectionId; // Assign default, won't be treated as content file anyway
  }

  const relativePath = getRelativePath(file.path, currentSelectedFolder);
  if (!relativePath) {
    return defaultSectionId;
  }

  for (const section of sections) {
    if (section.directory) {
      // Check if the relative path starts with the section directory
      // Ensure comparison handles potential trailing slashes consistently if needed
      if (
        relativePath === section.directory ||
        relativePath.startsWith(section.directory + "/")
      ) {
        return section.id;
      }
    }
  }
  return defaultSectionId;
};

// --- App Component ---
const App = () => {
  renderCount++;
  logger.debug(`App render #${renderCount} (instance: ${APP_INSTANCE_ID})`);

  // --- State from Zustand Store ---
  const hasHydrated = useProjectStore(selectHasHydrated);
  const selectedFolder = useProjectStore(selectCurrentSelectedFolder);
  const recentFolders = useProjectStore(selectRecentFolders);
  const allFiles = useProjectStore(selectStoreAllFilesHook); // Use the selector
  const processingStatus = useProjectStore(selectProcessingStatus);
  // Get state specific to the current project using a selector
  const currentProjectState = useProjectStore(selectCurrentProjectState);
  // Destructure needed properties from currentProjectState
  const {
    selectedFiles,
    // expandedNodes, // Not directly used in App render logic anymore
    sortOrder,
    searchTerm,
    fileListView,
    includeFileTree,
    includePromptOverview,
  } = currentProjectState;

  // --- Actions from Zustand Store ---
  // Get actions once using getState, prevents re-renders triggered by action references changing
  const {
    setCurrentSelectedFolder,
    setAllFiles: setStoreAllFilesAction, // Rename action getter
    setProcessingStatus: setStoreProcessingStatusAction, // Rename action getter
    toggleFileSelection,
    // toggleFolderSelection, // Called from Sidebar
    // selectAllFiles, // Called from Sidebar
    // deselectAllFiles, // Called from Sidebar
    setSortOrder,
    setSearchTerm,
    setFileListView,
    // toggleExpandedNode, // Called from Sidebar
    setIncludeFileTree,
    setIncludePromptOverview,
    removeRecentFolder,
    exitFolder,
    // addRecentFolder, // Called internally by setCurrentSelectedFolder
  } = useProjectStore.getState();

  // --- Local UI State ---
  // Type with normal destructuring
  const [sortDropdownOpen, setSortDropdownOpen] = useState(false);
  const sortDropdownRef = useRef<HTMLDivElement>(null); // Typed ref

  // Check if we're running in Electron or browser environment
  const isElectron = window.electron !== undefined;

  // --- Derived State & Calculations ---

  // Memoize displayed files based on filtering and sorting from the store state
  const displayedFiles = useMemo(() => {
    logger.debug(
      `Recalculating displayedFiles. allFiles: ${allFiles.length}, sort: ${sortOrder}, filter: ${searchTerm}`
    );
    let filtered = allFiles;
    // Apply filter if searchTerm is present
    if (searchTerm) {
      const lowerFilter = searchTerm.toLowerCase();
      filtered = allFiles.filter(
        (file) =>
          file.name.toLowerCase().includes(lowerFilter) ||
          // Also check relative path for better filtering consistency
          getRelativePath(file.path, selectedFolder)
            .toLowerCase()
            .includes(lowerFilter)
      );
    }

    // Apply sort
    const [sortKey, sortDir] = sortOrder.split("-");
    const sorted = [...filtered].sort((a, b) => {
      let comparison = 0;
      if (sortKey === "name") comparison = a.name.localeCompare(b.name);
      else if (sortKey === "tokens")
        comparison = (a.tokenCount || 0) - (b.tokenCount || 0);
      // Handle potential undefined tokenCount
      else if (sortKey === "size") comparison = (a.size || 0) - (b.size || 0);
      // Handle potential undefined size
      else if (sortKey === "path")
        comparison = comparePathsStructurally(a.path, b.path, selectedFolder); // selectedFolder can be null, handle appropriately if needed inside compare
      return sortDir === "asc" ? comparison : -comparison;
    });
    return sorted;
  }, [allFiles, sortOrder, searchTerm, selectedFolder]); // Ensure selectedFolder is a dependency

  // Memoize total token calculation
  const totalSelectedTokens = useMemo(() => {
    logger.debug(
      `Recalculating totalSelectedTokens. selectedFiles: ${selectedFiles.length}`
    );
    const selectedFilesSet = new Set(selectedFiles.map(normalizePath));
    return allFiles.reduce((total, file) => {
      // Check if the normalized path exists in the set and add token count
      if (selectedFilesSet.has(normalizePath(file.path))) {
        return total + (file.tokenCount || 0); // Ensure tokenCount is treated as 0 if undefined/null
      }
      return total;
    }, 0);
  }, [selectedFiles, allFiles]); // Dependencies are selectedFiles array and allFiles array

  // Format marker helper function
  const formatMarker = useCallback(
    (
      template: string,
      context: { section_name?: string; file_path?: string }
    ): string => {
      let result = template;
      if (context.section_name !== undefined)
        result = result.replace("{section_name}", context.section_name);
      if (context.file_path !== undefined)
        result = result.replace("{file_path}", context.file_path);
      return result;
    },
    [] // No dependencies, this function is pure
  );

  // --- Generate Content for Copying (Derived) ---
  const getSelectedFilesContent = useCallback(() => {
    logger.debug(
      `Generating content for copying. selectedFiles: ${selectedFiles.length}`
    );
    const currentAllFiles = useProjectStore.getState().allFiles; // Get latest allFiles
    const currentSelectedFiles =
      useProjectStore.getState().projects[selectedFolder!]?.selectedFiles || []; // Get latest selection for current folder
    const currentSortOrder =
      useProjectStore.getState().projects[selectedFolder!]?.sortOrder ||
      DEFAULT_SORT_ORDER;
    const currentIncludeFileTree =
      useProjectStore.getState().projects[selectedFolder!]?.includeFileTree ??
      DEFAULT_INCLUDE_FILE_TREE_GLOBAL;
    const currentIncludePromptOverview =
      useProjectStore.getState().projects[selectedFolder!]
        ?.includePromptOverview ?? DEFAULT_INCLUDE_PROMPT_OVERVIEW_GLOBAL;

    const selectedPathSet = new Set(currentSelectedFiles.map(normalizePath));

    const contentFiles = currentAllFiles.filter(
      (file: FileData) =>
        selectedPathSet.has(normalizePath(file.path)) && // Use set for efficiency
        !file.isBinary &&
        !file.isSkipped &&
        !file.descriptionForSectionId &&
        !file.isOverviewTemplate &&
        !file.isProjectTreeDescription
    );

    const descriptionMap: Record<string, string> = {};
    let overviewContent: string | null = null;
    currentAllFiles.forEach((file: FileData) => {
      if (file.content) {
        if (file.descriptionForSectionId) {
          descriptionMap[file.descriptionForSectionId] = file.content;
        } else if (file.isProjectTreeDescription) {
          descriptionMap["project_tree"] = file.content;
        } else if (file.isOverviewTemplate) {
          overviewContent = file.content;
        }
      }
    });

    if (
      contentFiles.length === 0 &&
      !currentIncludeFileTree &&
      !currentIncludePromptOverview
    ) {
      return "No text files selected, or tree/overview not included.";
    }

    // Sort the content files based on the current sort order
    const [sortKey, sortDir] = currentSortOrder.split("-");
    const sortedContentFiles = [...contentFiles].sort((a, b) => {
      let comparison = 0;
      if (sortKey === "name") comparison = a.name.localeCompare(b.name);
      else if (sortKey === "tokens")
        comparison = (a.tokenCount || 0) - (b.tokenCount || 0);
      else if (sortKey === "size") comparison = (a.size || 0) - (b.size || 0);
      else if (sortKey === "path")
        comparison = comparePathsStructurally(a.path, b.path, selectedFolder); // Pass selectedFolder
      return sortDir === "asc" ? comparison : -comparison;
    });

    let output = "";
    const markers = PROMPT_MARKERS;

    // Overview
    if (currentIncludePromptOverview && overviewContent) {
      output += "==== SYSTEM_PROMPT_OVERVIEW ====\n";
      output += String(overviewContent).trim() + "\n\n";
    }

    // Project Tree
    if (currentIncludeFileTree && selectedFolder) {
      const treeSectionName = PROJECT_TREE_CONFIG.name;
      const treeDescription = descriptionMap["project_tree"];
      output +=
        formatMarker(markers.section_open, { section_name: treeSectionName }) +
        "\n";
      if (treeDescription) {
        output += markers.description_open + "\n";
        output += String(treeDescription).trim() + "\n";
        output += markers.description_close + "\n\n";
      }
      output += ".\n"; // Root indicator
      const asciiTree = generateAsciiFileTree(
        // Generate tree based on the *selected* and *sorted* content files
        sortedContentFiles,
        selectedFolder
      );
      output += asciiTree + "\n";
      output +=
        formatMarker(markers.section_close, { section_name: treeSectionName }) +
        "\n\n";
    }

    // Group files by section
    const filesBySection: Record<string, FileData[]> = {};
    const defaultSectionId =
      PROMPT_SECTIONS.find((s) => s.directory === null)?.id || "project_files";
    sortedContentFiles.forEach((file) => {
      const sectionId =
        file.sectionId || categorizeFile(file, selectedFolder, PROMPT_SECTIONS); // Ensure sectionId exists or categorize again
      if (!filesBySection[sectionId]) filesBySection[sectionId] = [];
      filesBySection[sectionId].push(file);
    });

    // Iterate through sections in defined order
    for (const section of PROMPT_SECTIONS) {
      const sectionFiles = filesBySection[section.id];
      if (!sectionFiles || sectionFiles.length === 0) continue;

      // Section Start
      output +=
        formatMarker(markers.section_open, { section_name: section.name }) +
        "\n\n";

      // Section Description
      const description = descriptionMap[section.id];
      if (description) {
        output += markers.description_open + "\n";
        output += String(description).trim() + "\n";
        output += markers.description_close + "\n\n";
      }

      // Files within Section
      sectionFiles.forEach((file) => {
        const relativePath = getRelativePath(file.path, selectedFolder);
        output +=
          formatMarker(markers.file_open, { file_path: relativePath }) + "\n";
        output += file.content || ""; // Use empty string if content is missing
        if (file.content && !file.content.endsWith("\n")) output += "\n"; // Ensure newline
        output +=
          formatMarker(markers.file_close, { file_path: relativePath }) +
          "\n\n";
      });

      // Section End
      output +=
        formatMarker(markers.section_close, { section_name: section.name }) +
        "\n\n";
    }

    return output.trim(); // Trim final output
  }, [selectedFolder, formatMarker]); // Depend on selectedFolder and formatMarker, state is fetched inside

  // --- Event Handlers ---

  const openFolder = useCallback(() => {
    if (isElectron) {
      logger.info("Opening folder dialog");
      window.electron.ipcRenderer.send("open-folder");
    } else {
      logger.warn("Folder selection not available in browser");
    }
  }, [isElectron]);

  const handleFolderSelectedIPC = useCallback(
    (folderPath: string) => {
      if (typeof folderPath === "string") {
        logger.info(`IPC: folder-selected received: ${folderPath}`);
        setCurrentSelectedFolder(folderPath); // Use action from store
      } else {
        logger.error(`IPC: Invalid folder path received: ${folderPath}`);
        setStoreProcessingStatusAction({
          status: "error",
          message: "Invalid folder path received",
        }); // Use action
      }
    },
    [setCurrentSelectedFolder, setStoreProcessingStatusAction] // Actions as dependencies
  );

  const handleFileListDataIPC = useCallback(
    (receivedData: FileData[] | { files: FileData[] }) => {
      logger.info(`IPC: file-list-data received`);
      const filesArray = Array.isArray(receivedData)
        ? receivedData
        : receivedData.files;

      // Must get current selected folder *at the time of execution*
      const currentSelectedFolder =
        useProjectStore.getState().currentSelectedFolder;

      const categorizedFiles = filesArray.map((file) => ({
        ...file,
        // Ensure sectionId is calculated based on the folder that was *requested*, which should match currentSelectedFolder here
        sectionId: categorizeFile(file, currentSelectedFolder, PROMPT_SECTIONS),
      }));

      setStoreAllFilesAction(categorizedFiles); // Use action
      setStoreProcessingStatusAction({
        status: "complete",
        message: `Loaded ${categorizedFiles.length} files`,
      }); // Use action
    },
    [setStoreAllFilesAction, setStoreProcessingStatusAction] // Actions as dependencies
  );

  const handleProcessingStatusIPC = useCallback(
    (status: ProcessingStatus) => {
      logger.info(`IPC: file-processing-status received: ${status.status}`);
      setStoreProcessingStatusAction(status); // Use action
    },
    [setStoreProcessingStatusAction] // Action as dependency
  );

  const requestFileList = useCallback(
    (folderPath: string, forceRefresh: boolean = false) => {
      if (!isElectron || !folderPath) return;
      logger.debug(
        `Requesting file list for ${folderPath}, forceRefresh: ${forceRefresh}`
      );
      setStoreProcessingStatusAction({
        // Use action
        status: "processing",
        message: forceRefresh
          ? "Reloading folder..."
          : "Refreshing folder data...",
      });
      window.electron.ipcRenderer.send("request-file-list", {
        path: folderPath,
        forceRefresh: forceRefresh,
      });
    },
    [isElectron, setStoreProcessingStatusAction]
  ); // Action as dependency

  const refreshFolder = useCallback(() => {
    // Get current selected folder directly from store state when called
    const currentSelectedFolder =
      useProjectStore.getState().currentSelectedFolder;
    if (currentSelectedFolder) {
      requestFileList(currentSelectedFolder, true);
    }
  }, [requestFileList]); // requestFileList is stable due to its own dependencies

  const reloadFolder = useCallback(() => {
    // For now, same as refresh
    refreshFolder();
  }, [refreshFolder]);

  const handleSortChange = useCallback(
    (newSort: string) => {
      setSortOrder(newSort); // Use action
      setSortDropdownOpen(false);
    },
    [setSortOrder]
  ); // Action as dependency

  const handleSearchChange = useCallback(
    (newSearch: string) => {
      setSearchTerm(newSearch); // Use action
    },
    [setSearchTerm]
  ); // Action as dependency

  const handleViewChange = useCallback(
    (newView: "structured" | "flat") => {
      setFileListView(newView); // Use action
    },
    [setFileListView]
  ); // Action as dependency

  const selectRecentFolder = useCallback(
    (folderPath: string) => {
      if (!isElectron) return;
      setCurrentSelectedFolder(folderPath); // Use action
    },
    [isElectron, setCurrentSelectedFolder]
  ); // Action as dependency

  const removeRecentFolderHandler = useCallback(
    (folderPath: string, event: MouseEvent) => {
      event.stopPropagation();
      removeRecentFolder(folderPath); // Use action
    },
    [removeRecentFolder]
  ); // Action as dependency

  const handleExitFolder = useCallback(() => {
    exitFolder(); // Use action
  }, [exitFolder]); // Action as dependency

  // --- Effects ---

  useEffect(() => {
    if (!isElectron) return;
    logger.debug(
      `Setting up IPC listeners (render #${renderCount}, instance: ${APP_INSTANCE_ID})`
    );

    const folderSelectedHandler = handleFolderSelectedIPC;
    const fileListDataHandler = handleFileListDataIPC;
    const processingStatusHandler = handleProcessingStatusIPC;

    window.electron.ipcRenderer.on("folder-selected", folderSelectedHandler);
    window.electron.ipcRenderer.on("file-list-data", fileListDataHandler);
    window.electron.ipcRenderer.on(
      "file-processing-status",
      processingStatusHandler
    );
    logger.debug("IPC listeners registered.");

    return () => {
      logger.debug(
        `Cleaning up IPC listeners (render #${renderCount}, instance: ${APP_INSTANCE_ID})`
      );
      window.electron.ipcRenderer.removeListener(
        "folder-selected",
        folderSelectedHandler
      );
      window.electron.ipcRenderer.removeListener(
        "file-list-data",
        fileListDataHandler
      );
      window.electron.ipcRenderer.removeListener(
        "file-processing-status",
        processingStatusHandler
      );
      logger.debug("IPC listeners removed.");
    };
  }, [
    isElectron,
    handleFolderSelectedIPC,
    handleFileListDataIPC,
    handleProcessingStatusIPC,
  ]);

  useEffect(() => {
    if (hasHydrated && isElectron && selectedFolder) {
      logger.info(
        `Effect: selectedFolder changed to ${selectedFolder} or hydrated. Requesting file list.`
      );
      // We request every time the selected folder changes after hydration
      requestFileList(selectedFolder, false);
    } else if (hasHydrated && !selectedFolder) {
      // Clear files if no folder is selected after hydration
      const currentAllFiles = useProjectStore.getState().allFiles;
      if (currentAllFiles.length > 0) {
        logger.debug(
          "Effect: No folder selected after hydration, clearing allFiles."
        );
        setStoreAllFilesAction([]); // Use action
      }
    }
  }, [
    selectedFolder,
    hasHydrated,
    isElectron,
    requestFileList,
    setStoreAllFilesAction,
  ]); // Add action to dependencies

  useEffect(() => {
    const handleClickOutside = (event: globalThis.MouseEvent) => {
      if (
        sortDropdownRef.current &&
        !sortDropdownRef.current.contains(event.target as Node)
      ) {
        setSortDropdownOpen(false);
      }
    };
    if (sortDropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [sortDropdownOpen]);

  // Explicitly typed sort options array
  const sortOptions: SortOptionConfig[] = [
    {
      value: "path-asc",
      label: "Structure (A-Z)",
      icon: <FolderUp size={16} />,
      description: "Structure (A-Z)",
    },
    {
      value: "path-desc",
      label: "Structure (Z-A)",
      icon: <FolderDown size={16} />,
      description: "Structure (Z-A)",
    },
    {
      value: "tokens-asc",
      label: "Tokens (Low to High)",
      icon: <ChartNoAxesColumnIncreasingIcon size={16} />,
      description: "Tokens (Low to High)",
    },
    {
      value: "tokens-desc",
      label: "Tokens (High to Low)",
      icon: <ChartNoAxesColumnDecreasingIcon size={16} />,
      description: "Tokens (High to Low)",
    },
    {
      value: "name-asc",
      label: "Name (A to Z)",
      icon: <SortAsc size={16} />,
      description: "Name (A to Z)",
    },
    {
      value: "name-desc",
      label: "Name (Z to A)",
      icon: <SortDesc size={16} />,
      description: "Name (Z to A)",
    },
  ];

  // --- Render Logic ---
  if (!hasHydrated) {
    return (
      <div className="processing-indicator">
        <div className="spinner"></div>
        <span>Loading application state...</span>
      </div>
    );
  }

  return (
    <ThemeProvider>
      <div className="app-container">
        {/* Processing Status */}
        {processingStatus.status === "processing" && (
          <div className="processing-indicator">
            <div className="spinner"></div>
            <span>{processingStatus.message}</span>
          </div>
        )}
        {processingStatus.status === "error" && (
          <div className="error-message">Error: {processingStatus.message}</div>
        )}

        {/* Welcome Screen */}
        {!selectedFolder && (
          <div className="initial-prompt">
            <div className="initial-prompt-content">
              <div className="initial-header">
                <h2>PasteMax</h2>
                <div className="initial-actions">
                  <ThemeToggle />
                  <button className="select-folder-btn" onClick={openFolder}>
                    <FolderOpen size={16} />
                    <span>Select Folder</span>
                  </button>
                </div>
              </div>
              {recentFolders.length > 0 && (
                <div className="recent-folders-section">
                  <div className="recent-folders-title">Recent folders</div>
                  <ul className="recent-folders-list">
                    {recentFolders.map((folderPath: string, index: number) => (
                      <div
                        key={folderPath} // Use folderPath for key
                        className="recent-folder-item"
                        onClick={() => selectRecentFolder(folderPath)}
                        title={folderPath}
                        role="button"
                        tabIndex={0}
                        onKeyDown={(e) => {
                          // Basic keyboard accessibility
                          if (e.key === "Enter" || e.key === " ") {
                            e.preventDefault();
                            selectRecentFolder(folderPath);
                          }
                        }}
                        aria-label={`Open folder: ${basename(folderPath)}`}
                      >
                        <div className="recent-folder-content">
                          <span className="recent-folder-name">
                            {basename(folderPath)}
                          </span>
                          <span className="recent-folder-path">
                            {folderPath}
                          </span>
                        </div>
                        <button
                          className="recent-folder-delete"
                          onClick={(e) =>
                            removeRecentFolderHandler(folderPath, e)
                          }
                          title="Remove from recent folders"
                          aria-label={`Remove ${basename(
                            folderPath
                          )} from recent folders`}
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Main Layout */}
        {selectedFolder && (
          <div className="main-content">
            {/* IMPORTANT: SidebarProps in src/types/FileTypes.ts needs temporary adjustments */}
            {/* until Sidebar is refactored to use the store directly. */}
            {/* Mark unused props like allFiles, selectedFiles, etc. as optional (?) there. */}
            {/* <Sidebar
              selectedFolder={selectedFolder} // Pass for display
              openFolder={openFolder}
              refreshFolder={refreshFolder}
              reloadFolder={reloadFolder}
              // The following props are intentionally omitted as Sidebar will get them from the store:
              // allFiles, selectedFiles, toggleFileSelection, toggleFolderSelection,
              // searchTerm, onSearchChange, selectAllFiles, deselectAllFiles,
              // expandedNodes, toggleExpanded
            /> */}
            <div className="content-area">
              {/* Header */}
              <div className="content-header">
                <h1>PasteMax</h1>
                <div className="header-actions">
                  <ThemeToggle />
                  <div className="folder-info">
                    {selectedFolder && (
                      <div className="selected-folder">{selectedFolder}</div>
                    )}
                    <button
                      className="select-folder-btn"
                      onClick={openFolder}
                      disabled={processingStatus.status === "processing"}
                      title="Select Folder"
                    >
                      <FolderOpen size={16} />
                    </button>
                    {selectedFolder && (
                      <button
                        className="select-folder-btn"
                        onClick={reloadFolder}
                        disabled={processingStatus.status === "processing"}
                        title="Reload"
                      >
                        <RefreshCw size={16} />
                      </button>
                    )}
                    {selectedFolder && (
                      <button
                        className="select-folder-btn"
                        onClick={handleExitFolder}
                        title="Exit Folder"
                      >
                        <LogOut size={16} />
                      </button>
                    )}
                  </div>
                </div>
              </div>

              {/* Content Header 2 */}
              <div className="content-header">
                <div className="content-title">Selected Files</div>
                <div className="content-actions">
                  <FileListToggle
                    view={fileListView}
                    onChange={handleViewChange}
                  />
                  <div className="sort-dropdown" ref={sortDropdownRef}>
                    <button
                      className="sort-dropdown-button"
                      onClick={() => setSortDropdownOpen(!sortDropdownOpen)}
                      title={
                        sortOptions.find((opt) => opt.value === sortOrder)
                          ?.description ?? "Select Sort Order"
                      }
                    >
                      {sortOptions.find((opt) => opt.value === sortOrder)
                        ?.icon ?? <ArrowUpDown size={16} />}
                      <ArrowUpDown size={13} />
                    </button>
                    {sortDropdownOpen && (
                      <div className="sort-options">
                        {sortOptions.map((option) => (
                          <div
                            key={option.value}
                            className={`sort-option ${
                              sortOrder === option.value ? "active" : ""
                            }`}
                            onClick={() => handleSortChange(option.value)}
                            title={option.description}
                          >
                            {option.icon}
                            <span>{option.description}</span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                  <div className="file-stats">
                    {selectedFiles.length} files | ~
                    {totalSelectedTokens.toLocaleString()} tokens
                  </div>
                </div>
              </div>

              {/* FileList */}
              <FileList
                files={displayedFiles} // Pass the memoized sorted/filtered list
                selectedFiles={selectedFiles} // Pass selection from store state
                toggleFileSelection={toggleFileSelection} // Pass action directly
                selectedFolder={selectedFolder}
                view={fileListView}
              />

              {/* Footer / Copy Area */}
              <div className="copy-button-container">
                <FileTreeToggle
                  checked={includePromptOverview}
                  onChange={() =>
                    setIncludePromptOverview(!includePromptOverview)
                  } // Use action
                  title={
                    includePromptOverview
                      ? "Exclude prompt overview from output"
                      : "Include prompt overview in output"
                  }
                >
                  <span>Include Overview</span>
                </FileTreeToggle>
                <FileTreeToggle
                  checked={includeFileTree}
                  onChange={() => setIncludeFileTree(!includeFileTree)} // Use action
                  title={
                    includeFileTree
                      ? "Exclude file tree from output"
                      : "Include file tree in output"
                  }
                >
                  <span>Include File Tree</span>
                </FileTreeToggle>
                <CopyButton
                  text={getSelectedFilesContent()} // Call the memoized function
                  className="primary full-width copy-files-btn"
                >
                  <span>COPY ({selectedFiles.length} files)</span>
                </CopyButton>
              </div>
            </div>
          </div>
        )}
      </div>
    </ThemeProvider>
  );
};

export default App;
